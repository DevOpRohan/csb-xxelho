{"version":3,"sources":["Chat.js","index.js"],"names":["Chat","_useState","useState","_useState2","_slicedToArray","userMessage","setUserMessage","_useState3","_useState4","chatMessages","setChatMessages","_useState5","_useState6","isButtonClicked","setIsButtonClicked","chatContainerRef","useRef","fetchBotMessage","useCallback","fetch","concat","then","response","text","data","botMessage","message","isBot","prevChatMessages","_toConsumableArray","slice","catch","error","console","useEffect","current","scrollTop","scrollHeight","_jsx","Card","style","width","margin","marginTop","children","_jsxs","CardContent","Typography","variant","align","gutterBottom","display","flexDirection","height","overflow","ref","map","index","justifyContent","marginBottom","maxWidth","backgroundColor","padding","fontSize","alignItems","TextField","fullWidth","label","value","onChange","event","target","autoComplete","autoFocus","Button","color","onClick","rootElement","document","getElementById","createRoot","render","StrictMode"],"mappings":"yLAgIeA,EAvHF,WACX,IAAAC,EAAsCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA3CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAClCI,EAAwCL,mBAAS,IAAGM,EAAAJ,YAAAG,EAAA,GAA7CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,EAA8CT,oBAAS,GAAMU,EAAAR,YAAAO,EAAA,GAAtDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GACpCG,EAAmBC,iBAAO,MAkB1BC,EAAkBC,uBAAY,WAClCC,MAAM,2DAADC,OAA4Df,IAC9DgB,MAAK,SAACC,GAAQ,OAAKA,EAASC,MAAM,IAClCF,MAAK,SAACG,GACL,IAAMC,EAAa,CAAEC,QAASF,EAAMG,OAAO,GAC3CjB,GAAgB,SAACkB,GAAgB,SAAAR,OAAAS,YAC5BD,EAAiBE,MAAM,GAAI,IAAE,CAChCL,GAAU,GAEd,IACCM,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAChB,GACJ,GAAG,CAAC3B,IAkBJ,OAhBA6B,qBAAU,WACJrB,IACFI,IACAH,GAAmB,GACnBR,EAAe,IAGnB,GAAG,CAACO,EAAiBI,IAErBiB,qBAAU,WACJnB,EAAiBoB,UACnBpB,EAAiBoB,QAAQC,UACvBrB,EAAiBoB,QAAQE,aAE/B,GAAG,CAAC5B,IAGF6B,cAACC,IAAI,CAACC,MAAO,CAAEC,MAAO,QAASC,OAAQ,OAAQC,UAAW,QAASC,SACjEC,eAACC,IAAW,CAAAF,SAAA,CACVN,cAACS,IAAU,CAACC,QAAQ,KAAKC,MAAM,SAASC,cAAY,EAAAN,SAAC,WAGrDN,cAAA,OACEE,MAAO,CACLW,QAAS,OACTC,cAAe,SACfC,OAAQ,OACRC,SAAU,QAEZC,IAAKxC,EAAiB6B,SAErBnC,EAAa+C,KAAI,SAAC9B,EAAS+B,GAAK,OAC/BnB,cAAA,OAEEE,MAAO,CACLW,QAAS,OACTO,eAAgBhC,EAAQC,MAAQ,aAAe,WAC/CgC,aAAc,OACdf,SAEFN,cAACC,IAAI,CACHC,MAAO,CACLC,MAAO,OACPmB,SAAU,MACVC,iBAAmC,IAAlBnC,EAAQC,MAAkB,UAAY,SACvDiB,SAEFN,cAACQ,IAAW,CACVN,MAAO,CACLsB,QAAS,OACTlB,SAEFN,cAACS,IAAU,CAACC,QAAQ,QAAQR,MAAO,CAAEuB,SAAU,IAAKnB,SACjDlB,EAAQA,eApBV+B,EAwBD,MAGVZ,eAAA,OAAKL,MAAO,CAAEW,QAAS,OAAQa,WAAY,UAAWpB,SAAA,CACpDN,cAAC2B,IAAS,CACRC,WAAS,EACTC,MAAM,iBACNC,MAAO/D,EACPgE,SAhGsB,SAACC,GAC/BhE,EAAegE,EAAMC,OAAOH,MAC9B,EA+FUI,aAAa,MACbC,WAAS,IAEXnC,cAACoC,IAAM,CACL1B,QAAQ,YACR2B,MAAM,UACNC,QAnGgB,WACxB,GAAIvE,EAAa,CACf,IAAMoB,EAAa,CAAEC,QAAS,YAAaC,OAAO,GAClDjB,GAAgB,SAACkB,GAAgB,SAAAR,OAAAS,YAC5BD,GAAgB,CACnB,CAAEF,QAASrB,EAAasB,OAAO,GAC/BF,GAAU,IAEZX,GAAmB,EACrB,CACF,EAyFqC8B,SAC5B,gBAOX,ECzHMiC,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH3C,cAAC4C,aAAU,CAAAtC,SACTN,cAACtC,EAAI,M","file":"static/js/main.af4cabd6.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport {\n  Card,\n  CardContent,\n  TextField,\n  Typography,\n  Button\n} from \"@material-ui/core\";\n\nconst Chat = () => {\n  const [userMessage, setUserMessage] = useState(\"\");\n  const [chatMessages, setChatMessages] = useState([]);\n  const [isButtonClicked, setIsButtonClicked] = useState(false);\n  const chatContainerRef = useRef(null);\n\n  const handleUserMessageChange = (event) => {\n    setUserMessage(event.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (userMessage) {\n      const botMessage = { message: \"Typing...\", isBot: true };\n      setChatMessages((prevChatMessages) => [\n        ...prevChatMessages,\n        { message: userMessage, isBot: false },\n        botMessage\n      ]);\n      setIsButtonClicked(true);\n    }\n  };\n\n  const fetchBotMessage = useCallback(() => {\n    fetch(`https://walrus-app-hodhq.ondigitalocean.app/visiongpt?q=${userMessage}`)\n      .then((response) => response.text())\n      .then((data) => {\n        const botMessage = { message: data, isBot: true };\n        setChatMessages((prevChatMessages) => [\n          ...prevChatMessages.slice(0, -1),\n          botMessage\n        ]);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, [userMessage]);\n\n  useEffect(() => {\n    if (isButtonClicked) {\n      fetchBotMessage();\n      setIsButtonClicked(false);\n      setUserMessage(\"\");\n    }\n    // chatContainerRef.current.scrollTo(0, chatContainerRef.current.scrollHeight);\n  }, [isButtonClicked, fetchBotMessage]);\n\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop =\n        chatContainerRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n\n  return (\n    <Card style={{ width: \"300px\", margin: \"auto\", marginTop: \"50px\" }}>\n      <CardContent>\n        <Typography variant=\"h4\" align=\"center\" gutterBottom>\n          Vision\n        </Typography>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            height: \"60vh\",\n            overflow: \"auto\"\n          }}\n          ref={chatContainerRef}\n        >\n          {chatMessages.map((message, index) => (\n            <div\n              key={index}\n              style={{\n                display: \"flex\",\n                justifyContent: message.isBot ? \"flex-start\" : \"flex-end\",\n                marginBottom: \"8px\"\n              }}\n            >\n              <Card\n                style={{\n                  width: \"auto\",\n                  maxWidth: \"70%\",\n                  backgroundColor: message.isBot === false ? \"#f7f7f7\" : \"white\"\n                }}\n              >\n                <CardContent\n                  style={{\n                    padding: \"5px\"\n                  }}\n                >\n                  <Typography variant=\"body1\" style={{ fontSize: 14 }}>\n                    {message.message}\n                  </Typography>\n                </CardContent>\n              </Card>\n            </div>\n          ))}\n        </div>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <TextField\n            fullWidth\n            label=\"Type a message\"\n            value={userMessage}\n            onChange={handleUserMessageChange}\n            autoComplete=\"off\"\n            autoFocus\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleSendMessage}\n          >\n            Send\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Chat;\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport Chat from \"./Chat\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <Chat />\n  </StrictMode>\n);\n"],"sourceRoot":""}